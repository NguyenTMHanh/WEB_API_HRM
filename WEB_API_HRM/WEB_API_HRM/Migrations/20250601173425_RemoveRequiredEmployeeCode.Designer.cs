// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WEB_API_HRM.Data;

#nullable disable

namespace WEB_API_HRM.Migrations
{
    [DbContext(typeof(HRMContext))]
    [Migration("20250601173425_RemoveRequiredEmployeeCode")]
    partial class RemoveRequiredEmployeeCode
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WEB_API_HRM.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("WEB_API_HRM.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WEB_API_HRM.Data.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssueAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.ActionModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.AllowanceModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("MoneyAllowance")
                        .HasColumnType("double precision");

                    b.Property<double>("MoneyAllowanceNoTax")
                        .HasColumnType("double precision");

                    b.Property<string>("NameAllowance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeAllowance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allowances");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.BasicSettingSalaryModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("DayWorkStandard")
                        .HasColumnType("double precision");

                    b.Property<double>("HourWorkStandard")
                        .HasColumnType("double precision");

                    b.Property<double>("HourlySalary")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("BasicSettingSalary");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.BranchDepartmentModel", b =>
                {
                    b.Property<string>("BranchId")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.HasKey("BranchId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("BranchDepartment");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.BranchModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Branchs");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.CheckInOutSettingModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("BreakHour")
                        .HasColumnType("integer");

                    b.Property<int>("BreakMinute")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Checkin")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("Checkout")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("CheckInOutSettings");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.ContractEmployeeModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BasicSettingSalaryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContractStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateEndContract")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStartContract")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("MoneyBasicSalary")
                        .HasColumnType("double precision");

                    b.Property<string>("SalaryCoefficientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeContract")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BasicSettingSalaryId");

                    b.HasIndex("EmployeeCode")
                        .IsUnique();

                    b.HasIndex("SalaryCoefficientId");

                    b.ToTable("ContractEmployees");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.DeductionLevelModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("DependentDeduction")
                        .HasColumnType("double precision");

                    b.Property<double>("IndividualDeduction")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("DeductionLevel");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.DepartmentModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.DependentModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DayOfBirthDependent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EvidencePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameDependent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegisterDependentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Dependents");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.EmployeeAllowance", b =>
                {
                    b.Property<string>("AllowanceId")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractEmployeeModelId")
                        .HasColumnType("text");

                    b.HasKey("AllowanceId", "EmployeeCode");

                    b.HasIndex("ContractEmployeeModelId");

                    b.HasIndex("EmployeeCode");

                    b.ToTable("EmployeeAllowances");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.EmployeeModel", b =>
                {
                    b.Property<string>("EmployeeCode")
                        .HasColumnType("text");

                    b.HasKey("EmployeeCode");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.HolidayModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HolidayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.InsuranceEmployeeModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CodeBHXH")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodeBHYT")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateEndParticipateInsurance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStartParticipateBHTN")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStartParticipateBHXH")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStartParticipateBHYT")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasBHXH")
                        .HasColumnType("boolean");

                    b.Property<string>("InsuranceStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RateInsuranceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegisterMedical")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeCode")
                        .IsUnique();

                    b.HasIndex("RateInsuranceId");

                    b.ToTable("InsuranceEmployees");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.JobTitleModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobTitleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RankId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.HasIndex("RoleId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.JobTypeModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("NameJobType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkHourMinimum")
                        .HasColumnType("integer");

                    b.Property<int>("WorkMinuteMinimum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.MinimumWageAreaModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("MoneyMinimumWageArea")
                        .HasColumnType("double precision");

                    b.Property<string>("NameArea")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MinimumWageAreas");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.ModuleModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.PersonalEmployeeModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BackIdentificationPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BranchBank")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateIssueIdentification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DistrictContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DistrictResidence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ethnicity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontIdentificationPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseNumberContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseNumberResidence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameBank")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameEmployee")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumberIdentification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PlaceIssueIdentification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProvinceContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProvinceResidence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WardContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WardResidence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeCode")
                        .IsUnique();

                    b.ToTable("PersonalEmployees");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.PersonelEmployeeModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BranchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateJoinCompany")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobTitleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("MinuteBreakLunch")
                        .HasColumnType("double precision");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RankId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeCode")
                        .IsUnique();

                    b.HasIndex("JobTitleId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RankId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("PersonelEmployees");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.PositionModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.RankModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("integer");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.RateInsuranceModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("bhtnBusinessRate")
                        .HasColumnType("double precision");

                    b.Property<double>("bhtnEmpRate")
                        .HasColumnType("double precision");

                    b.Property<double>("bhxhBusinessRate")
                        .HasColumnType("double precision");

                    b.Property<double>("bhxhEmpRate")
                        .HasColumnType("double precision");

                    b.Property<double>("bhytBusinessRate")
                        .HasColumnType("double precision");

                    b.Property<double>("bhytEmpRate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("RateInsurances");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.RoleModuleActionModel", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("ModuleId")
                        .HasColumnType("text");

                    b.Property<string>("ActionId")
                        .HasColumnType("text");

                    b.HasKey("RoleId", "ModuleId", "ActionId");

                    b.HasIndex("ActionId");

                    b.HasIndex("ModuleId");

                    b.ToTable("RoleModuleActions");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.SalaryCoefficientModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SalaryCoefficient")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("SalaryCoefficients");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.TaxEmployeeModel", b =>
                {
                    b.Property<string>("EmployeeCode")
                        .HasColumnType("text");

                    b.Property<bool>("HasTaxCode")
                        .HasColumnType("boolean");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EmployeeCode");

                    b.ToTable("TaxEmployees");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.TaxRateProgressionModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("Progression")
                        .HasColumnType("double precision");

                    b.Property<double>("TaxRate")
                        .HasColumnType("double precision");

                    b.Property<double>("TaxableIncome")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("TaxRateProgressions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("WEB_API_HRM.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WEB_API_HRM.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WEB_API_HRM.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("WEB_API_HRM.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WEB_API_HRM.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WEB_API_HRM.Data.RefreshToken", b =>
                {
                    b.HasOne("WEB_API_HRM.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.BranchDepartmentModel", b =>
                {
                    b.HasOne("WEB_API_HRM.Models.BranchModel", "Branch")
                        .WithMany("BranchDepartment")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Models.DepartmentModel", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.ContractEmployeeModel", b =>
                {
                    b.HasOne("WEB_API_HRM.Models.BasicSettingSalaryModel", "BasicSettingSalary")
                        .WithMany()
                        .HasForeignKey("BasicSettingSalaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Models.EmployeeModel", "Employee")
                        .WithOne()
                        .HasForeignKey("WEB_API_HRM.Models.ContractEmployeeModel", "EmployeeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Models.SalaryCoefficientModel", "SalaryCoefficient")
                        .WithMany()
                        .HasForeignKey("SalaryCoefficientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicSettingSalary");

                    b.Navigation("Employee");

                    b.Navigation("SalaryCoefficient");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.DependentModel", b =>
                {
                    b.HasOne("WEB_API_HRM.Models.EmployeeModel", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.EmployeeAllowance", b =>
                {
                    b.HasOne("WEB_API_HRM.Models.AllowanceModel", "Allowance")
                        .WithMany()
                        .HasForeignKey("AllowanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Models.ContractEmployeeModel", null)
                        .WithMany("EmployeeAllowances")
                        .HasForeignKey("ContractEmployeeModelId");

                    b.HasOne("WEB_API_HRM.Models.EmployeeModel", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allowance");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.InsuranceEmployeeModel", b =>
                {
                    b.HasOne("WEB_API_HRM.Models.EmployeeModel", "Employee")
                        .WithOne()
                        .HasForeignKey("WEB_API_HRM.Models.InsuranceEmployeeModel", "EmployeeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Models.RateInsuranceModel", "RateInsurance")
                        .WithMany()
                        .HasForeignKey("RateInsuranceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("RateInsurance");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.JobTitleModel", b =>
                {
                    b.HasOne("WEB_API_HRM.Models.RankModel", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Data.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rank");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.PersonalEmployeeModel", b =>
                {
                    b.HasOne("WEB_API_HRM.Models.EmployeeModel", "Employee")
                        .WithOne()
                        .HasForeignKey("WEB_API_HRM.Models.PersonalEmployeeModel", "EmployeeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.PersonelEmployeeModel", b =>
                {
                    b.HasOne("WEB_API_HRM.Models.BranchModel", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Models.DepartmentModel", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Models.EmployeeModel", "Employee")
                        .WithOne()
                        .HasForeignKey("WEB_API_HRM.Models.PersonelEmployeeModel", "EmployeeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Models.JobTitleModel", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Models.PositionModel", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Models.RankModel", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Data.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("JobTitle");

                    b.Navigation("Position");

                    b.Navigation("Rank");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.PositionModel", b =>
                {
                    b.HasOne("WEB_API_HRM.Models.DepartmentModel", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.RoleModuleActionModel", b =>
                {
                    b.HasOne("WEB_API_HRM.Models.ActionModel", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Models.ModuleModel", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB_API_HRM.Data.ApplicationRole", "Role")
                        .WithMany("RoleModuleActions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Module");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.SalaryCoefficientModel", b =>
                {
                    b.HasOne("WEB_API_HRM.Models.PositionModel", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.TaxEmployeeModel", b =>
                {
                    b.HasOne("WEB_API_HRM.Models.EmployeeModel", "Employee")
                        .WithOne()
                        .HasForeignKey("WEB_API_HRM.Models.TaxEmployeeModel", "EmployeeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WEB_API_HRM.Data.ApplicationRole", b =>
                {
                    b.Navigation("RoleModuleActions");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.BranchModel", b =>
                {
                    b.Navigation("BranchDepartment");
                });

            modelBuilder.Entity("WEB_API_HRM.Models.ContractEmployeeModel", b =>
                {
                    b.Navigation("EmployeeAllowances");
                });
#pragma warning restore 612, 618
        }
    }
}
